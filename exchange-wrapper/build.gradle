group 'com.mali'
version '1.2'

buildscript {
    repositories {
        maven {
            url 'https://repo.spring.io/libs-release'
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE")
        classpath("com.bmuschko:gradle-docker-plugin:3.2.1")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'C:\\Users\\Felipe G\\.m2\\repository'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'org.json', name: 'json', version: '20180130'
    compile ("com.twilio.sdk:twilio:7.17.0")
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.3'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework:spring-web")
    compile("com.fasterxml.jackson.core:jackson-databind")
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile ("com.binance.api:binance-api-client:1.0.0")
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task createDockerfile(type: Dockerfile) {
    dependsOn build
    destFile = project.file('./Dockerfile')
    from 'openjdk:8-jdk-alpine'
    maintainer 'Marcos Vinicius Meneses "marcos.vinicius@maliexchange.com"'
    instruction 'ENV ACTIVE_PROFILE production'
    volume '/tmp'
    instruction 'COPY build/libs/exchange-wrapper-'+version+'.jar app.jar'

    instruction 'EXPOSE 9003'
    instruction 'CMD ["java","-jar","-Dspring.profiles.active=${ACTIVE_PROFILE}","app.jar" ]'
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    noCache = true
    tag = '778467513455.dkr.ecr.sa-east' +
            '-1.amazonaws.com/exchange-wrapper:'+version
}

task pushImageToECR() {
    doLast {
        def stdout = new ByteArrayOutputStream()
        exec{
            commandLine 'aws','ecr','get-login','--no-include-email','--region','sa-east-1'
            standardOutput = stdout;
        }
        exec{
            def commandLoginEcr = stdout.toString().split(' ')
            commandLoginEcr[commandLoginEcr.length-1] = 'https://778467513455.dkr.ecr.sa-east-1.amazonaws.com'
            commandLine commandLoginEcr
        }
        exec {
            commandLine 'docker','push','778467513455.dkr.ecr.sa-east-1.amazonaws.com/exchange-wrapper:'+version
        }
    }
}